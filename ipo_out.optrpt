Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.3.304 Build 20200925_000000

Compiler options: -qopenmp -Ofast -fast -qopt-report=5 -qopt-report-phase=vec -Wall -std=c99 -lm -o d2q9-bgk

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(202,3)
   remark #15382: vectorization support: call to function timestep_new3(const t_param, t_speed_soa *__restrict__, t_speed_soa *__restrict__, int *__restrict__) cannot be vectorized   [ d2q9-bgk.c(205,19) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: timestep_new3(const t_param, t_speed_soa *__restrict__, t_speed_soa *__restrict__, int *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(302,3)
   remark #15388: vectorization support: reference cells->speed1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(312,7) ]
   remark #15388: vectorization support: reference cells->speed1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(312,7) ]
   remark #15388: vectorization support: reference cells->speed5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(313,7) ]
   remark #15388: vectorization support: reference cells->speed5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(313,7) ]
   remark #15388: vectorization support: reference cells->speed8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(314,7) ]
   remark #15388: vectorization support: reference cells->speed8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(314,7) ]
   remark #15388: vectorization support: reference cells->speed3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(316,7) ]
   remark #15388: vectorization support: reference cells->speed3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(316,7) ]
   remark #15388: vectorization support: reference cells->speed6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(317,7) ]
   remark #15388: vectorization support: reference cells->speed6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(317,7) ]
   remark #15388: vectorization support: reference cells->speed7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(318,7) ]
   remark #15388: vectorization support: reference cells->speed7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(318,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.158
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15454: masked aligned unit stride loads: 9 
   remark #15455: masked aligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 9.500 
   remark #15478: estimated potential speedup: 2.060 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(327,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(327,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(327,5)
      remark #15389: vectorization support: reference tmp_cells->speed0[ii+jj*?] has unaligned access   [ d2q9-bgk.c(338,9) ]
      remark #15389: vectorization support: reference cells->speed0[ii+jj*?] has unaligned access   [ d2q9-bgk.c(338,48) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*?] has unaligned access   [ d2q9-bgk.c(339,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*?] has unaligned access   [ d2q9-bgk.c(340,9) ]
      remark #15389: vectorization support: reference cells->speed4[ii+y_n*?] has unaligned access   [ d2q9-bgk.c(340,48) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*?] has unaligned access   [ d2q9-bgk.c(341,9) ]
      remark #15389: vectorization support: reference cells->speed1[x_w+jj*?] has unaligned access   [ d2q9-bgk.c(341,48) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*?] has unaligned access   [ d2q9-bgk.c(342,9) ]
      remark #15389: vectorization support: reference cells->speed2[ii+y_s*?] has unaligned access   [ d2q9-bgk.c(342,48) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*?] has unaligned access   [ d2q9-bgk.c(343,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*?] has unaligned access   [ d2q9-bgk.c(344,9) ]
      remark #15389: vectorization support: reference cells->speed8[x_w+y_n*?] has unaligned access   [ d2q9-bgk.c(344,48) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*?] has unaligned access   [ d2q9-bgk.c(345,9) ]
      remark #15389: vectorization support: reference cells->speed5[x_w+y_s*?] has unaligned access   [ d2q9-bgk.c(345,48) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*?] has unaligned access   [ d2q9-bgk.c(346,9) ]
      remark #15389: vectorization support: reference cells->speed0[ii+jj*?] has unaligned access   [ d2q9-bgk.c(356,22) ]
      remark #15389: vectorization support: reference cells->speed4[ii+y_n*?] has unaligned access   [ d2q9-bgk.c(360,22) ]
      remark #15389: vectorization support: reference cells->speed2[ii+y_s*?] has unaligned access   [ d2q9-bgk.c(358,22) ]
      remark #15389: vectorization support: reference cells->speed1[x_w+jj*?] has unaligned access   [ d2q9-bgk.c(357,22) ]
      remark #15389: vectorization support: reference cells->speed5[x_w+y_s*?] has unaligned access   [ d2q9-bgk.c(361,22) ]
      remark #15389: vectorization support: reference cells->speed8[x_w+y_n*?] has unaligned access   [ d2q9-bgk.c(364,22) ]
      remark #15389: vectorization support: reference cells->speed1[x_w+jj*?] has unaligned access   [ d2q9-bgk.c(368,18) ]
      remark #15389: vectorization support: reference cells->speed5[x_w+y_s*?] has unaligned access   [ d2q9-bgk.c(369,21) ]
      remark #15389: vectorization support: reference cells->speed8[x_w+y_n*?] has unaligned access   [ d2q9-bgk.c(370,21) ]
      remark #15389: vectorization support: reference cells->speed2[ii+y_s*?] has unaligned access   [ d2q9-bgk.c(376,18) ]
      remark #15389: vectorization support: reference cells->speed5[x_w+y_s*?] has unaligned access   [ d2q9-bgk.c(377,21) ]
      remark #15389: vectorization support: reference cells->speed4[ii+y_n*?] has unaligned access   [ d2q9-bgk.c(379,22) ]
      remark #15389: vectorization support: reference cells->speed8[x_w+y_n*?] has unaligned access   [ d2q9-bgk.c(381,25) ]
      remark #15389: vectorization support: reference tmp_cells->speed0[ii+jj*?] has unaligned access   [ d2q9-bgk.c(432,5) ]
      remark #15389: vectorization support: reference cells->speed0[ii+jj*?] has unaligned access   [ d2q9-bgk.c(432,44) ]
      remark #15389: vectorization support: reference cells->speed0[ii+jj*?] has unaligned access   [ d2q9-bgk.c(434,61) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*?] has unaligned access   [ d2q9-bgk.c(436,5) ]
      remark #15389: vectorization support: reference cells->speed1[x_w+jj*?] has unaligned access   [ d2q9-bgk.c(436,44) ]
      remark #15389: vectorization support: reference cells->speed1[x_w+jj*?] has unaligned access   [ d2q9-bgk.c(438,61) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*?] has unaligned access   [ d2q9-bgk.c(440,5) ]
      remark #15389: vectorization support: reference cells->speed2[ii+y_s*?] has unaligned access   [ d2q9-bgk.c(440,44) ]
      remark #15389: vectorization support: reference cells->speed2[ii+y_s*?] has unaligned access   [ d2q9-bgk.c(442,61) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*?] has unaligned access   [ d2q9-bgk.c(444,5) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*?] has unaligned access   [ d2q9-bgk.c(448,5) ]
      remark #15389: vectorization support: reference cells->speed4[ii+y_n*?] has unaligned access   [ d2q9-bgk.c(448,44) ]
      remark #15389: vectorization support: reference cells->speed4[ii+y_n*?] has unaligned access   [ d2q9-bgk.c(450,61) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*?] has unaligned access   [ d2q9-bgk.c(452,5) ]
      remark #15389: vectorization support: reference cells->speed5[x_w+y_s*?] has unaligned access   [ d2q9-bgk.c(452,44) ]
      remark #15389: vectorization support: reference cells->speed5[x_w+y_s*?] has unaligned access   [ d2q9-bgk.c(454,61) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*?] has unaligned access   [ d2q9-bgk.c(456,5) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*?] has unaligned access   [ d2q9-bgk.c(460,5) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*?] has unaligned access   [ d2q9-bgk.c(464,5) ]
      remark #15389: vectorization support: reference cells->speed8[x_w+y_n*?] has unaligned access   [ d2q9-bgk.c(464,44) ]
      remark #15389: vectorization support: reference cells->speed8[x_w+y_n*?] has unaligned access   [ d2q9-bgk.c(466,61) ]
      remark #15389: vectorization support: reference tmp_cells->speed0[ii+jj*?] has unaligned access   [ d2q9-bgk.c(472,22) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*?] has unaligned access   [ d2q9-bgk.c(473,22) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*?] has unaligned access   [ d2q9-bgk.c(474,22) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*?] has unaligned access   [ d2q9-bgk.c(475,22) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*?] has unaligned access   [ d2q9-bgk.c(476,22) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*?] has unaligned access   [ d2q9-bgk.c(477,22) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*?] has unaligned access   [ d2q9-bgk.c(478,22) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*?] has unaligned access   [ d2q9-bgk.c(479,22) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*?] has unaligned access   [ d2q9-bgk.c(480,22) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*?] has unaligned access   [ d2q9-bgk.c(483,12) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*?] has unaligned access   [ d2q9-bgk.c(484,21) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*?] has unaligned access   [ d2q9-bgk.c(485,21) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*?] has unaligned access   [ d2q9-bgk.c(486,22) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*?] has unaligned access   [ d2q9-bgk.c(487,25) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*?] has unaligned access   [ d2q9-bgk.c(488,25) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*?] has unaligned access   [ d2q9-bgk.c(491,12) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*?] has unaligned access   [ d2q9-bgk.c(492,21) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*?] has unaligned access   [ d2q9-bgk.c(493,21) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*?] has unaligned access   [ d2q9-bgk.c(494,22) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*?] has unaligned access   [ d2q9-bgk.c(495,25) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*?] has unaligned access   [ d2q9-bgk.c(496,25) ]
      remark #15389: vectorization support: reference tmp_cells->speed0[ii+jj*?] has unaligned access   [ d2q9-bgk.c(338,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*?] has unaligned access   [ d2q9-bgk.c(339,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*?] has unaligned access   [ d2q9-bgk.c(340,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*?] has unaligned access   [ d2q9-bgk.c(341,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*?] has unaligned access   [ d2q9-bgk.c(342,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*?] has unaligned access   [ d2q9-bgk.c(343,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*?] has unaligned access   [ d2q9-bgk.c(344,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*?] has unaligned access   [ d2q9-bgk.c(345,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*?] has unaligned access   [ d2q9-bgk.c(346,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed0[ii+jj*?] has unaligned access   [ d2q9-bgk.c(432,5) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*?] has unaligned access   [ d2q9-bgk.c(436,5) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*?] has unaligned access   [ d2q9-bgk.c(440,5) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*?] has unaligned access   [ d2q9-bgk.c(444,5) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*?] has unaligned access   [ d2q9-bgk.c(448,5) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*?] has unaligned access   [ d2q9-bgk.c(452,5) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*?] has unaligned access   [ d2q9-bgk.c(456,5) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*?] has unaligned access   [ d2q9-bgk.c(460,5) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*?] has unaligned access   [ d2q9-bgk.c(464,5) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed3[x_e+jj*?]>, part of index is conditional   [ d2q9-bgk.c(339,48) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed7[x_e+y_n*?]>, part of index is conditional   [ d2q9-bgk.c(343,48) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed6[x_e+y_s*?]>, part of index is conditional   [ d2q9-bgk.c(346,48) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed3[x_e+jj*?]>, part of index is conditional   [ d2q9-bgk.c(359,22) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed7[x_e+y_n*?]>, part of index is conditional   [ d2q9-bgk.c(363,22) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed6[x_e+y_s*?]>, part of index is conditional   [ d2q9-bgk.c(362,22) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed3[x_e+jj*?]>, part of index is conditional   [ d2q9-bgk.c(371,22) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed7[x_e+y_n*?]>, part of index is conditional   [ d2q9-bgk.c(373,25) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed6[x_e+y_s*?]>, part of index is conditional   [ d2q9-bgk.c(372,25) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed6[x_e+y_s*?]>, part of index is conditional   [ d2q9-bgk.c(378,21) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed7[x_e+y_n*?]>, part of index is conditional   [ d2q9-bgk.c(380,25) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed3[x_e+jj*?]>, part of index is conditional   [ d2q9-bgk.c(444,44) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed3[x_e+jj*?]>, part of index is conditional   [ d2q9-bgk.c(446,61) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed6[x_e+y_s*?]>, part of index is conditional   [ d2q9-bgk.c(456,44) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed6[x_e+y_s*?]>, part of index is conditional   [ d2q9-bgk.c(458,61) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed7[x_e+y_n*?]>, part of index is conditional   [ d2q9-bgk.c(460,44) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed7[x_e+y_n*?]>, part of index is conditional   [ d2q9-bgk.c(462,61) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.197
      remark #15355: vectorization support: at (499:5) is float type reduction   [ d2q9-bgk.c(499,5) ]
      remark #15355: vectorization support: at (501:7) is int type reduction   [ d2q9-bgk.c(501,7) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 38 
      remark #15451: unmasked unaligned unit stride stores: 18 
      remark #15462: unmasked indexed (or gather) loads: 17 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 461 
      remark #15477: vector cost: 198.370 
      remark #15478: estimated potential speedup: 2.190 
      remark #15486: divides: 4 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(327,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: calc_reynolds(const t_param, t_speed_soa *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(3451,3) inlined into d2q9-bgk.c(3775,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(3453,5) inlined into d2q9-bgk.c(3775,10)
      remark #15388: vectorization support: reference cells->speed0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3461,26) ]
      remark #15388: vectorization support: reference cells->speed1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3462,26) ]
      remark #15388: vectorization support: reference cells->speed2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3463,26) ]
      remark #15388: vectorization support: reference cells->speed3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3464,26) ]
      remark #15388: vectorization support: reference cells->speed4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3465,26) ]
      remark #15388: vectorization support: reference cells->speed5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3466,26) ]
      remark #15388: vectorization support: reference cells->speed6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3467,26) ]
      remark #15388: vectorization support: reference cells->speed7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3468,26) ]
      remark #15388: vectorization support: reference cells->speed8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3469,26) ]
      remark #15388: vectorization support: reference cells->speed1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3472,22) ]
      remark #15388: vectorization support: reference cells->speed5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3473,25) ]
      remark #15388: vectorization support: reference cells->speed8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3474,25) ]
      remark #15388: vectorization support: reference cells->speed3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3475,26) ]
      remark #15388: vectorization support: reference cells->speed6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3476,28) ]
      remark #15388: vectorization support: reference cells->speed7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3477,28) ]
      remark #15388: vectorization support: reference cells->speed2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3480,22) ]
      remark #15388: vectorization support: reference cells->speed5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3481,25) ]
      remark #15388: vectorization support: reference cells->speed6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3482,25) ]
      remark #15388: vectorization support: reference cells->speed4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3483,26) ]
      remark #15388: vectorization support: reference cells->speed7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3484,28) ]
      remark #15388: vectorization support: reference cells->speed8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(3485,28) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.047
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(3426,3) ]
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(3422,20) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15454: masked aligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 105 
      remark #15477: vector cost: 23.750 
      remark #15478: estimated potential speedup: 4.220 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: write_values(const t_param, t_speed_soa *, int *, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(3813,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(3861,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (3861:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (3861:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (3861:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (3861:7)

   LOOP BEGIN at d2q9-bgk.c(3815,5)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(3861,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between u_y (3820:15) and u_y (3861:7)
      remark #15346: vector dependence: assumed ANTI dependence between u_y (3861:7) and u_y (3820:15)
      remark #15346: vector dependence: assumed ANTI dependence between u_y (3861:7) and u_y (3820:15)
      remark #15346: vector dependence: assumed FLOW dependence between u_y (3820:15) and u_y (3861:7)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(3874,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(3876,5) ]
LOOP END
===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, t_speed_soa *, t_speed_soa *, int **, float **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(3694,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at d2q9-bgk.c(3639,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between cells_ptr->speed0[ii+jj*params->nx] (3647:7) and cells_ptr->speed8[ii+jj*params->nx] (3669:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between cells_ptr->speed8[ii+jj*params->nx] (3669:7) and cells_ptr->speed0[ii+jj*params->nx] (3647:7)

   LOOP BEGIN at d2q9-bgk.c(3641,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between cells_ptr->speed0[ii+jj*params->nx] (3647:7) and cells_ptr->speed8[ii+jj*params->nx] (3669:7)
      remark #15346: vector dependence: assumed OUTPUT dependence between cells_ptr->speed8[ii+jj*params->nx] (3669:7) and cells_ptr->speed0[ii+jj*params->nx] (3647:7)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(3676,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(3678,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(3678,5)
         remark #15389: vectorization support: reference *obstacles_ptr[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(3680,9) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 4.000 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(3678,5)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================
